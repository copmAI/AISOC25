
3.2.4	Assets and Fields
A peculiar feature of Stipula is the dichotomy between asset and field values. These language components shall be thought at as locations where contract’s data are stored. The difference between them is given by the kind of data held.  Fields contain simple data values that are updated at will by the parties in the agreement phase. They can concern, for instance, time limits, costs, or a good identification number. These values are updated in the agreement constructor and agreed upon by the parties. 
On the other hand, assets values indicate linear resources. They represent the physical or virtual goods managed by the smart contract like money, a personal right or a token representing a good. The key difference compared to field values is that assets must respect a total supply, they cannot be duplicated or leaked: when they are sent to a new address, the location previously holding the value is emptied . The same does not apply to fields (when a field value is updated to the contract, no previous location exists, or needs to be emptied).  This design choice promotes a safer programming discipline that reduces the risk of double-spending, accidental loss, or the locked-in assets . Assets generally contain goods in token form: either a divisible token representing a sum of money or an indivisible token representing a non-fungible good. 

Legal contracts are usually required to manage currencies or digital goods(transfers, escrows etc.). In Stipula these entities are called assets and are
modelled by ad hoc syntactic operation, thus separating them from other
data types. For example, an asset transfer is expressed by
w ⊸ wallet
that empties the asset w and moves its value into the wallet (that is, the
value of wallet is augmented by the value of w). In contrast to assets, standard
values, such as the foregoing price, are not emptied, e.g. p → price
updates the value of price to p, but p is not emptied.

3.2.5	Lollypop and arrow operators
The lollypop (⊸) and arrow () symbols are two operators used to express assignments. They are employed to differentiate updates of assets and of fields, respectively. The lollypop expresses an asset’s update. The point of having a different operator for assets is to clearly spot the operations where the moving of a resource entails the emptying of the previous location. Assets, as mentioned above, must preserve a total supply. When a value “E” of a linear resource (e.g., a sum of money or a non-fungible token) is moved from inside the smart contract (asset “h”) to party B’s address, the lollypop expresses the operation as follows: “E ⊸ h, B”. Such formulation indicates that the asset “E” is subtracted from field “h” and sent to party “B”. In the following smart contracts examples this formulation will be abbreviated when the value sent and the previous location are indicated with the same letter. So, for example, the operation “h ⊸ h, A”, representing the transfer of value “h” from location “h” to location “A”, would be abbreviated in “h ⊸ A”.
The arrow (), instead, is used to indicate a simple data sending. For example, the operation “time’s up  B” means that the message “time’s up” was sent to location B, which represents one party’s address. As it is evident, there’s no need to indicate the previous location since there is no actual transfer of value but rather the creation and upload of mere data.
On the legal side, when these operators are used to manage goods and rights object to the contract, they have different legal meanings.
When a token is transferred through a lollypop it means that one party of the agreement gives in the exclusive control of the token either to another party or to the smart contract itself. Tokens generally represent goods or rights and therefore, the lollypop here shows a right or good transfer. For this reason, we assert that the lollypop operator indicates a translative effect. The right (or good) moved pre-existed in another location and is now held by a new entity. At the same time the lollypop transfer ensures that no one will tamper with the enjoyment of that right, since it was completely removed from the previous location. This also gives a “hamper-proof” feature to the rights transferred through such operator. Consequently, the lollypop fits perfectly for representing the transfer of ownership rights. In fact, ownership always entails a precedent holder and needs to be exclusive to be fully effective.
By contrast, the arrow indicates a constitutive effect, i.e., it establishes a new right not existing previously. The arrow has been employed to represent the creation of a usage right on a certain good through the creation of a code (password) that allows the access to the good. This operation is represented in Stipula with the formula “uses(t)  A” where a usage code for token “t” (uses(t)) is sent to party A’s address. 
The validity of such code, however, is controlled by the original token, meaning that the token holder will have influence on the right exercise. So, by contrast to the lollypop, the arrow does not provide any exclusiveness feature since the token was not moved to another location and still remains in custody of its holder. A solution is to place the token inside the smart contract so that one party cannot interfere with the other’s right (though this solution cannot be permanent). 



